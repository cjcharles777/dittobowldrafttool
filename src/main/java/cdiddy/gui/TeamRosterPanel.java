/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cdiddy.gui;

import cdiddy.objects.Player;
import cdiddy.objects.Roster;
import cdiddy.objects.league.YahooLeague;
import cdiddy.services.rest.PlayersRESTService;
import cdiddy.utils.application.GameService;
import cdiddy.utils.application.TeamService;
import java.awt.Component;
import java.util.LinkedList;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author cedric
 */
public class TeamRosterPanel extends javax.swing.JPanel {

    private  List<Player> listRosterPlayers = new LinkedList<Player>();
    private RosterPlayerTableModel rosterTableModel = new RosterPlayerTableModel();
    private TeamService teamservice;
    private PlayersRESTService playersRESTService;
    private GameService gameService;
    private YahooLeague yl;
    private int week;
    
    
    /**
     * Creates new form TeamRosterPanel
     */
    public TeamRosterPanel() {
        initComponents();
    }
    public TeamRosterPanel(TeamService teamservice, PlayersRESTService playersRESTService, GameService gameService, int week) 
    {
        initComponents();
        this.teamservice = teamservice;
        this.playersRESTService = playersRESTService;
        this.gameService = gameService;
        this.week = week;
         populateRosterTable();
       
         
    }
  /**  public TeamRosterPanel(List<Player> roster) 
    {
        initComponents();
        this.listRosterPlayers = roster;
         //listTeam = this.teamservice.loadUserTeams();
         populateRosterTable();
       
         
    }
    **/
    private void populateRosterTable()
    {
        for(Player player : listRosterPlayers)
        {
            rosterTableModel.addRow(player);
        }
        
    }

    public void populateRoster(String teamId, String leagueid) 
    {
        Roster roster = teamservice.getRoster(teamId, 1);
        yl = gameService.getLeague(leagueid);
        listRosterPlayers = new LinkedList<Player>();
        List<Player> yahooListPlayers = roster.getPlayers().getPlayer();
        for(Player yahooPlayer : yahooListPlayers)
        {
            Player temp = playersRESTService.retrivePlayer(Integer.parseInt(yahooPlayer.getPlayer_id()));
            listRosterPlayers.add(temp);
        }
        rosterTableModel = new RosterPlayerTableModel();
        jTable1.setModel(rosterTableModel);
        populateRosterTable();
    }
    
        public class PlayerCellEditorRenderer extends AbstractCellEditor implements TableCellRenderer, TableCellEditor 
    {
         private static final long serialVersionUID = 1L;
        private RosterPlayerPanel renderer = new RosterPlayerPanel();
        private RosterPlayerPanel editor = new RosterPlayerPanel();

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) 
        {
            renderer.setPlayer((Player) value, yl, week);
            return renderer;
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) 
        {
            editor.setPlayer((Player) value, yl, week);
            return editor;
        }

        @Override
        public Object getCellEditorValue() 
        {
            return editor.getPlayer();
        }

    }
    
    public class RosterPlayerTableModel extends DefaultTableModel 
    {
        private static final long serialVersionUID = 1L;

           @Override
           public int getColumnCount() {
               return 1;
           }

           public void addRow(Player player) {
               super.addRow(new Object[]{player});
               //super.fireTableDataChanged();
           }
       }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jTable1.setModel(rosterTableModel);
        jTable1.setRowHeight(new RosterPlayerPanel().getPreferredSize().height);
        jScrollPane1.setViewportView(jTable1);
        jTable1.setTableHeader(null);
        PlayerCellEditorRenderer playerCellEditorRenderer = new PlayerCellEditorRenderer();
        jTable1.setDefaultRenderer(Object.class, playerCellEditorRenderer);
        jTable1.setDefaultEditor(Object.class, playerCellEditorRenderer);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables





}
